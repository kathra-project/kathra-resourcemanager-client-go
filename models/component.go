// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Component component
// swagger:model Component
type Component struct {
	Resource

	// api repository
	APIRepository *SourceRepository `json:"apiRepository,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// implementations
	Implementations []*Implementation `json:"implementations"`

	// libraries
	Libraries []*Library `json:"libraries"`

	// title
	Title string `json:"title,omitempty"`

	// versions
	Versions []*APIVersion `json:"versions"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Component) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// AO1
	var dataAO1 struct {
		APIRepository *SourceRepository `json:"apiRepository,omitempty"`

		Description string `json:"description,omitempty"`

		Implementations []*Implementation `json:"implementations"`

		Libraries []*Library `json:"libraries"`

		Title string `json:"title,omitempty"`

		Versions []*APIVersion `json:"versions"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.APIRepository = dataAO1.APIRepository

	m.Description = dataAO1.Description

	m.Implementations = dataAO1.Implementations

	m.Libraries = dataAO1.Libraries

	m.Title = dataAO1.Title

	m.Versions = dataAO1.Versions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Component) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		APIRepository *SourceRepository `json:"apiRepository,omitempty"`

		Description string `json:"description,omitempty"`

		Implementations []*Implementation `json:"implementations"`

		Libraries []*Library `json:"libraries"`

		Title string `json:"title,omitempty"`

		Versions []*APIVersion `json:"versions"`
	}

	dataAO1.APIRepository = m.APIRepository

	dataAO1.Description = m.Description

	dataAO1.Implementations = m.Implementations

	dataAO1.Libraries = m.Libraries

	dataAO1.Title = m.Title

	dataAO1.Versions = m.Versions

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this component
func (m *Component) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImplementations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Component) validateAPIRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.APIRepository) { // not required
		return nil
	}

	if m.APIRepository != nil {
		if err := m.APIRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiRepository")
			}
			return err
		}
	}

	return nil
}

func (m *Component) validateImplementations(formats strfmt.Registry) error {

	if swag.IsZero(m.Implementations) { // not required
		return nil
	}

	for i := 0; i < len(m.Implementations); i++ {
		if swag.IsZero(m.Implementations[i]) { // not required
			continue
		}

		if m.Implementations[i] != nil {
			if err := m.Implementations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("implementations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Component) validateLibraries(formats strfmt.Registry) error {

	if swag.IsZero(m.Libraries) { // not required
		return nil
	}

	for i := 0; i < len(m.Libraries); i++ {
		if swag.IsZero(m.Libraries[i]) { // not required
			continue
		}

		if m.Libraries[i] != nil {
			if err := m.Libraries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("libraries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Component) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Component) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Component) UnmarshalBinary(b []byte) error {
	var res Component
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
