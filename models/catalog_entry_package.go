// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CatalogEntryPackage catalog entry package
// swagger:model CatalogEntryPackage
type CatalogEntryPackage struct {
	Asset

	// catalog entry
	CatalogEntry *CatalogEntry `json:"catalogEntry,omitempty"`

	// package type
	// Enum: [HELM]
	PackageType interface{} `json:"packageType,omitempty"`

	// Provider
	Provider string `json:"provider,omitempty"`

	// ProviderId
	ProviderID string `json:"providerId,omitempty"`

	// String
	URL string `json:"url,omitempty"`

	// versions
	Versions []*CatalogEntryPackageVersion `json:"versions"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CatalogEntryPackage) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Asset
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Asset = aO0

	// AO1
	var dataAO1 struct {
		CatalogEntry *CatalogEntry `json:"catalogEntry,omitempty"`

		PackageType interface{} `json:"packageType,omitempty"`

		Provider string `json:"provider,omitempty"`

		ProviderID string `json:"providerId,omitempty"`

		URL string `json:"url,omitempty"`

		Versions []*CatalogEntryPackageVersion `json:"versions"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CatalogEntry = dataAO1.CatalogEntry

	m.PackageType = dataAO1.PackageType

	m.Provider = dataAO1.Provider

	m.ProviderID = dataAO1.ProviderID

	m.URL = dataAO1.URL

	m.Versions = dataAO1.Versions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CatalogEntryPackage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Asset)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		CatalogEntry *CatalogEntry `json:"catalogEntry,omitempty"`

		PackageType interface{} `json:"packageType,omitempty"`

		Provider string `json:"provider,omitempty"`

		ProviderID string `json:"providerId,omitempty"`

		URL string `json:"url,omitempty"`

		Versions []*CatalogEntryPackageVersion `json:"versions"`
	}

	dataAO1.CatalogEntry = m.CatalogEntry

	dataAO1.PackageType = m.PackageType

	dataAO1.Provider = m.Provider

	dataAO1.ProviderID = m.ProviderID

	dataAO1.URL = m.URL

	dataAO1.Versions = m.Versions

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this catalog entry package
func (m *CatalogEntryPackage) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Asset
	if err := m.Asset.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogEntry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogEntryPackage) validateCatalogEntry(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogEntry) { // not required
		return nil
	}

	if m.CatalogEntry != nil {
		if err := m.CatalogEntry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("catalogEntry")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogEntryPackage) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogEntryPackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogEntryPackage) UnmarshalBinary(b []byte) error {
	var res CatalogEntryPackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
