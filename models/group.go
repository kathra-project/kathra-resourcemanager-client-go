// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Group group
// swagger:model Group
type Group struct {
	Resource

	// binary repositories
	BinaryRepositories []*BinaryRepository `json:"binaryRepositories"`

	// binary repository status
	// Enum: [PENDING READY UPDATING UNSTABLE ERROR DELETED]
	BinaryRepositoryStatus interface{} `json:"binaryRepositoryStatus,omitempty"`

	// members
	Members []*Assignation `json:"members"`

	// parent
	Parent *Group `json:"parent,omitempty"`

	// Group's path in case of subgroup
	Path string `json:"path,omitempty"`

	// pipeline folder status
	// Enum: [PENDING READY UPDATING UNSTABLE ERROR DELETED]
	PipelineFolderStatus interface{} `json:"pipelineFolderStatus,omitempty"`

	// source membership status
	// Enum: [PENDING READY UPDATING UNSTABLE ERROR DELETED]
	SourceMembershipStatus interface{} `json:"sourceMembershipStatus,omitempty"`

	// source repository status
	// Enum: [PENDING READY UPDATING UNSTABLE ERROR DELETED]
	SourceRepositoryStatus interface{} `json:"sourceRepositoryStatus,omitempty"`

	// technical user
	TechnicalUser *User `json:"technicalUser,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Group) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// AO1
	var dataAO1 struct {
		BinaryRepositories []*BinaryRepository `json:"binaryRepositories"`

		BinaryRepositoryStatus interface{} `json:"binaryRepositoryStatus,omitempty"`

		Members []*Assignation `json:"members"`

		Parent *Group `json:"parent,omitempty"`

		Path string `json:"path,omitempty"`

		PipelineFolderStatus interface{} `json:"pipelineFolderStatus,omitempty"`

		SourceMembershipStatus interface{} `json:"sourceMembershipStatus,omitempty"`

		SourceRepositoryStatus interface{} `json:"sourceRepositoryStatus,omitempty"`

		TechnicalUser *User `json:"technicalUser,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BinaryRepositories = dataAO1.BinaryRepositories

	m.BinaryRepositoryStatus = dataAO1.BinaryRepositoryStatus

	m.Members = dataAO1.Members

	m.Parent = dataAO1.Parent

	m.Path = dataAO1.Path

	m.PipelineFolderStatus = dataAO1.PipelineFolderStatus

	m.SourceMembershipStatus = dataAO1.SourceMembershipStatus

	m.SourceRepositoryStatus = dataAO1.SourceRepositoryStatus

	m.TechnicalUser = dataAO1.TechnicalUser

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Group) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		BinaryRepositories []*BinaryRepository `json:"binaryRepositories"`

		BinaryRepositoryStatus interface{} `json:"binaryRepositoryStatus,omitempty"`

		Members []*Assignation `json:"members"`

		Parent *Group `json:"parent,omitempty"`

		Path string `json:"path,omitempty"`

		PipelineFolderStatus interface{} `json:"pipelineFolderStatus,omitempty"`

		SourceMembershipStatus interface{} `json:"sourceMembershipStatus,omitempty"`

		SourceRepositoryStatus interface{} `json:"sourceRepositoryStatus,omitempty"`

		TechnicalUser *User `json:"technicalUser,omitempty"`
	}

	dataAO1.BinaryRepositories = m.BinaryRepositories

	dataAO1.BinaryRepositoryStatus = m.BinaryRepositoryStatus

	dataAO1.Members = m.Members

	dataAO1.Parent = m.Parent

	dataAO1.Path = m.Path

	dataAO1.PipelineFolderStatus = m.PipelineFolderStatus

	dataAO1.SourceMembershipStatus = m.SourceMembershipStatus

	dataAO1.SourceRepositoryStatus = m.SourceRepositoryStatus

	dataAO1.TechnicalUser = m.TechnicalUser

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBinaryRepositories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnicalUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) validateBinaryRepositories(formats strfmt.Registry) error {

	if swag.IsZero(m.BinaryRepositories) { // not required
		return nil
	}

	for i := 0; i < len(m.BinaryRepositories); i++ {
		if swag.IsZero(m.BinaryRepositories[i]) { // not required
			continue
		}

		if m.BinaryRepositories[i] != nil {
			if err := m.BinaryRepositories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("binaryRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Group) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Group) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *Group) validateTechnicalUser(formats strfmt.Registry) error {

	if swag.IsZero(m.TechnicalUser) { // not required
		return nil
	}

	if m.TechnicalUser != nil {
		if err := m.TechnicalUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("technicalUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
