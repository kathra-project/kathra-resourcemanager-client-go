// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// APIVersion Api version
// swagger:model ApiVersion
type APIVersion struct {
	Resource

	// api repository status
	// Enum: [PENDING READY UPDATING UNSTABLE ERROR DELETED]
	APIRepositoryStatus interface{} `json:"apiRepositoryStatus,omitempty"`

	// component
	Component *Component `json:"component,omitempty"`

	// implementations versions
	ImplementationsVersions []*ImplementationVersion `json:"implementationsVersions"`

	// libraries Api versions
	LibrariesAPIVersions []*LibraryAPIVersion `json:"librariesApiVersions"`

	// released
	Released bool `json:"released,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *APIVersion) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// AO1
	var dataAO1 struct {
		APIRepositoryStatus interface{} `json:"apiRepositoryStatus,omitempty"`

		Component *Component `json:"component,omitempty"`

		ImplementationsVersions []*ImplementationVersion `json:"implementationsVersions"`

		LibrariesAPIVersions []*LibraryAPIVersion `json:"librariesApiVersions"`

		Released bool `json:"released,omitempty"`

		Version string `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.APIRepositoryStatus = dataAO1.APIRepositoryStatus

	m.Component = dataAO1.Component

	m.ImplementationsVersions = dataAO1.ImplementationsVersions

	m.LibrariesAPIVersions = dataAO1.LibrariesAPIVersions

	m.Released = dataAO1.Released

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m APIVersion) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		APIRepositoryStatus interface{} `json:"apiRepositoryStatus,omitempty"`

		Component *Component `json:"component,omitempty"`

		ImplementationsVersions []*ImplementationVersion `json:"implementationsVersions"`

		LibrariesAPIVersions []*LibraryAPIVersion `json:"librariesApiVersions"`

		Released bool `json:"released,omitempty"`

		Version string `json:"version,omitempty"`
	}

	dataAO1.APIRepositoryStatus = m.APIRepositoryStatus

	dataAO1.Component = m.Component

	dataAO1.ImplementationsVersions = m.ImplementationsVersions

	dataAO1.LibrariesAPIVersions = m.LibrariesAPIVersions

	dataAO1.Released = m.Released

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Api version
func (m *APIVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImplementationsVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibrariesAPIVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIVersion) validateComponent(formats strfmt.Registry) error {

	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *APIVersion) validateImplementationsVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.ImplementationsVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.ImplementationsVersions); i++ {
		if swag.IsZero(m.ImplementationsVersions[i]) { // not required
			continue
		}

		if m.ImplementationsVersions[i] != nil {
			if err := m.ImplementationsVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("implementationsVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIVersion) validateLibrariesAPIVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.LibrariesAPIVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.LibrariesAPIVersions); i++ {
		if swag.IsZero(m.LibrariesAPIVersions[i]) { // not required
			continue
		}

		if m.LibrariesAPIVersions[i] != nil {
			if err := m.LibrariesAPIVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("librariesApiVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIVersion) UnmarshalBinary(b []byte) error {
	var res APIVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
