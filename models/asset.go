// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Asset asset
// swagger:model Asset
type Asset struct {
	Resource

	// binary repository
	BinaryRepository *BinaryRepository `json:"binaryRepository,omitempty"`

	// catalog entries
	CatalogEntries []*CatalogEntry `json:"catalogEntries"`

	// pipeline
	Pipeline *Pipeline `json:"pipeline,omitempty"`

	// source repository
	SourceRepository *SourceRepository `json:"sourceRepository,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Asset) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// AO1
	var dataAO1 struct {
		BinaryRepository *BinaryRepository `json:"binaryRepository,omitempty"`

		CatalogEntries []*CatalogEntry `json:"catalogEntries"`

		Pipeline *Pipeline `json:"pipeline,omitempty"`

		SourceRepository *SourceRepository `json:"sourceRepository,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BinaryRepository = dataAO1.BinaryRepository

	m.CatalogEntries = dataAO1.CatalogEntries

	m.Pipeline = dataAO1.Pipeline

	m.SourceRepository = dataAO1.SourceRepository

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Asset) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		BinaryRepository *BinaryRepository `json:"binaryRepository,omitempty"`

		CatalogEntries []*CatalogEntry `json:"catalogEntries"`

		Pipeline *Pipeline `json:"pipeline,omitempty"`

		SourceRepository *SourceRepository `json:"sourceRepository,omitempty"`
	}

	dataAO1.BinaryRepository = m.BinaryRepository

	dataAO1.CatalogEntries = m.CatalogEntries

	dataAO1.Pipeline = m.Pipeline

	dataAO1.SourceRepository = m.SourceRepository

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset
func (m *Asset) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBinaryRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipeline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Asset) validateBinaryRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.BinaryRepository) { // not required
		return nil
	}

	if m.BinaryRepository != nil {
		if err := m.BinaryRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("binaryRepository")
			}
			return err
		}
	}

	return nil
}

func (m *Asset) validateCatalogEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.CatalogEntries); i++ {
		if swag.IsZero(m.CatalogEntries[i]) { // not required
			continue
		}

		if m.CatalogEntries[i] != nil {
			if err := m.CatalogEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("catalogEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Asset) validatePipeline(formats strfmt.Registry) error {

	if swag.IsZero(m.Pipeline) { // not required
		return nil
	}

	if m.Pipeline != nil {
		if err := m.Pipeline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline")
			}
			return err
		}
	}

	return nil
}

func (m *Asset) validateSourceRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceRepository) { // not required
		return nil
	}

	if m.SourceRepository != nil {
		if err := m.SourceRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceRepository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Asset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Asset) UnmarshalBinary(b []byte) error {
	var res Asset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
