// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// BINARYREPOSITORYTYPE b i n a r y r e p o s i t o r y t y p e
// swagger:model BINARY_REPOSITORY_TYPE
type BINARYREPOSITORYTYPE string

const (

	// BINARYREPOSITORYTYPEJAVA captures enum value "JAVA"
	BINARYREPOSITORYTYPEJAVA BINARYREPOSITORYTYPE = "JAVA"

	// BINARYREPOSITORYTYPEPYTHON captures enum value "PYTHON"
	BINARYREPOSITORYTYPEPYTHON BINARYREPOSITORYTYPE = "PYTHON"

	// BINARYREPOSITORYTYPEDOCKERIMAGE captures enum value "DOCKER_IMAGE"
	BINARYREPOSITORYTYPEDOCKERIMAGE BINARYREPOSITORYTYPE = "DOCKER_IMAGE"

	// BINARYREPOSITORYTYPEHELM captures enum value "HELM"
	BINARYREPOSITORYTYPEHELM BINARYREPOSITORYTYPE = "HELM"
)

// for schema
var bINARYREPOSITORYTYPEEnum []interface{}

func init() {
	var res []BINARYREPOSITORYTYPE
	if err := json.Unmarshal([]byte(`["JAVA","PYTHON","DOCKER_IMAGE","HELM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bINARYREPOSITORYTYPEEnum = append(bINARYREPOSITORYTYPEEnum, v)
	}
}

func (m BINARYREPOSITORYTYPE) validateBINARYREPOSITORYTYPEEnum(path, location string, value BINARYREPOSITORYTYPE) error {
	if err := validate.Enum(path, location, value, bINARYREPOSITORYTYPEEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this b i n a r y r e p o s i t o r y t y p e
func (m BINARYREPOSITORYTYPE) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBINARYREPOSITORYTYPEEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
