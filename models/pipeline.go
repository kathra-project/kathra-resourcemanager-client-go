// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Pipeline pipeline
// swagger:model Pipeline
type Pipeline struct {
	Resource

	// credential Id
	CredentialID string `json:"credentialId,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// provider Id
	ProviderID string `json:"providerId,omitempty"`

	// source repository
	SourceRepository *SourceRepository `json:"sourceRepository,omitempty"`

	// template
	// Enum: [JAVA_LIBRARY PYTHON_LIBRARY JAVA_SERVICE PYTHON_SERVICE HELM_PACKAGE DOCKER_SERVICE]
	Template interface{} `json:"template,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Pipeline) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// AO1
	var dataAO1 struct {
		CredentialID string `json:"credentialId,omitempty"`

		Path string `json:"path,omitempty"`

		Provider string `json:"provider,omitempty"`

		ProviderID string `json:"providerId,omitempty"`

		SourceRepository *SourceRepository `json:"sourceRepository,omitempty"`

		Template interface{} `json:"template,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CredentialID = dataAO1.CredentialID

	m.Path = dataAO1.Path

	m.Provider = dataAO1.Provider

	m.ProviderID = dataAO1.ProviderID

	m.SourceRepository = dataAO1.SourceRepository

	m.Template = dataAO1.Template

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Pipeline) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		CredentialID string `json:"credentialId,omitempty"`

		Path string `json:"path,omitempty"`

		Provider string `json:"provider,omitempty"`

		ProviderID string `json:"providerId,omitempty"`

		SourceRepository *SourceRepository `json:"sourceRepository,omitempty"`

		Template interface{} `json:"template,omitempty"`
	}

	dataAO1.CredentialID = m.CredentialID

	dataAO1.Path = m.Path

	dataAO1.Provider = m.Provider

	dataAO1.ProviderID = m.ProviderID

	dataAO1.SourceRepository = m.SourceRepository

	dataAO1.Template = m.Template

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pipeline
func (m *Pipeline) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pipeline) validateSourceRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceRepository) { // not required
		return nil
	}

	if m.SourceRepository != nil {
		if err := m.SourceRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceRepository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pipeline) UnmarshalBinary(b []byte) error {
	var res Pipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
