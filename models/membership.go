// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Membership membership
// swagger:model Membership
type Membership struct {

	// member name
	MemberName string `json:"memberName,omitempty"`

	// member type
	// Enum: [user group]
	MemberType string `json:"memberType,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// role
	// Enum: [guest contributor manager]
	Role string `json:"role,omitempty"`
}

// Validate validates this membership
func (m *Membership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMemberType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var membershipTypeMemberTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","group"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		membershipTypeMemberTypePropEnum = append(membershipTypeMemberTypePropEnum, v)
	}
}

const (

	// MembershipMemberTypeUser captures enum value "user"
	MembershipMemberTypeUser string = "user"

	// MembershipMemberTypeGroup captures enum value "group"
	MembershipMemberTypeGroup string = "group"
)

// prop value enum
func (m *Membership) validateMemberTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, membershipTypeMemberTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Membership) validateMemberType(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemberTypeEnum("memberType", "body", m.MemberType); err != nil {
		return err
	}

	return nil
}

var membershipTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["guest","contributor","manager"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		membershipTypeRolePropEnum = append(membershipTypeRolePropEnum, v)
	}
}

const (

	// MembershipRoleGuest captures enum value "guest"
	MembershipRoleGuest string = "guest"

	// MembershipRoleContributor captures enum value "contributor"
	MembershipRoleContributor string = "contributor"

	// MembershipRoleManager captures enum value "manager"
	MembershipRoleManager string = "manager"
)

// prop value enum
func (m *Membership) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, membershipTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Membership) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Membership) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Membership) UnmarshalBinary(b []byte) error {
	var res Membership
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
