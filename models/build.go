// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Build build
// swagger:model Build
type Build struct {

	// Additional Build arguments
	BuildArguments []*BuildArgument `json:"buildArguments"`

	// Build identifier
	BuildNumber string `json:"buildNumber,omitempty"`

	// Commit id
	CommitID string `json:"commitId,omitempty"`

	// Branch or Tag
	CommitLabel string `json:"commitLabel,omitempty"`

	// Build date (UTC timestamp)
	CreationDate int64 `json:"creationDate,omitempty"`

	// Duration in seconds
	Duration int32 `json:"duration,omitempty"`

	// Build logs
	Logs string `json:"logs,omitempty"`

	// Pipeline path
	Path string `json:"path,omitempty"`

	// Build status
	// Enum: [scheduled processing success failed]
	Status string `json:"status,omitempty"`
}

// Validate validates this build
func (m *Build) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) validateBuildArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildArguments); i++ {
		if swag.IsZero(m.BuildArguments[i]) { // not required
			continue
		}

		if m.BuildArguments[i] != nil {
			if err := m.BuildArguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("buildArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var buildTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["scheduled","processing","success","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildTypeStatusPropEnum = append(buildTypeStatusPropEnum, v)
	}
}

const (

	// BuildStatusScheduled captures enum value "scheduled"
	BuildStatusScheduled string = "scheduled"

	// BuildStatusProcessing captures enum value "processing"
	BuildStatusProcessing string = "processing"

	// BuildStatusSuccess captures enum value "success"
	BuildStatusSuccess string = "success"

	// BuildStatusFailed captures enum value "failed"
	BuildStatusFailed string = "failed"
)

// prop value enum
func (m *Build) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, buildTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Build) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Build) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Build) UnmarshalBinary(b []byte) error {
	var res Build
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
