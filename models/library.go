// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Library library
// swagger:model Library
type Library struct {
	Asset

	// component
	Component *Component `json:"component,omitempty"`

	// language
	// Enum: [JAVA PYTHON]
	Language interface{} `json:"language,omitempty"`

	// type
	// Enum: [MODEL INTERFACE CLIENT]
	Type interface{} `json:"type,omitempty"`

	// versions
	Versions []*LibraryAPIVersion `json:"versions"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Library) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Asset
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Asset = aO0

	// AO1
	var dataAO1 struct {
		Component *Component `json:"component,omitempty"`

		Language interface{} `json:"language,omitempty"`

		Type interface{} `json:"type,omitempty"`

		Versions []*LibraryAPIVersion `json:"versions"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Component = dataAO1.Component

	m.Language = dataAO1.Language

	m.Type = dataAO1.Type

	m.Versions = dataAO1.Versions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Library) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Asset)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Component *Component `json:"component,omitempty"`

		Language interface{} `json:"language,omitempty"`

		Type interface{} `json:"type,omitempty"`

		Versions []*LibraryAPIVersion `json:"versions"`
	}

	dataAO1.Component = m.Component

	dataAO1.Language = m.Language

	dataAO1.Type = m.Type

	dataAO1.Versions = m.Versions

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this library
func (m *Library) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Asset
	if err := m.Asset.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Library) validateComponent(formats strfmt.Registry) error {

	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *Library) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Library) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Library) UnmarshalBinary(b []byte) error {
	var res Library
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
