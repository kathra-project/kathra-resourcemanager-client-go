// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LibraryAPIVersion library Api version
// swagger:model LibraryApiVersion
type LibraryAPIVersion struct {
	Resource

	// api repository status
	// Enum: [PENDING READY UPDATING UNSTABLE ERROR DELETED]
	APIRepositoryStatus interface{} `json:"apiRepositoryStatus,omitempty"`

	// api version
	APIVersion *APIVersion `json:"apiVersion,omitempty"`

	// library
	Library *Library `json:"library,omitempty"`

	// pipeline status
	// Enum: [PENDING READY UPDATING UNSTABLE ERROR DELETED]
	PipelineStatus interface{} `json:"pipelineStatus,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LibraryAPIVersion) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// AO1
	var dataAO1 struct {
		APIRepositoryStatus interface{} `json:"apiRepositoryStatus,omitempty"`

		APIVersion *APIVersion `json:"apiVersion,omitempty"`

		Library *Library `json:"library,omitempty"`

		PipelineStatus interface{} `json:"pipelineStatus,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.APIRepositoryStatus = dataAO1.APIRepositoryStatus

	m.APIVersion = dataAO1.APIVersion

	m.Library = dataAO1.Library

	m.PipelineStatus = dataAO1.PipelineStatus

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LibraryAPIVersion) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		APIRepositoryStatus interface{} `json:"apiRepositoryStatus,omitempty"`

		APIVersion *APIVersion `json:"apiVersion,omitempty"`

		Library *Library `json:"library,omitempty"`

		PipelineStatus interface{} `json:"pipelineStatus,omitempty"`
	}

	dataAO1.APIRepositoryStatus = m.APIRepositoryStatus

	dataAO1.APIVersion = m.APIVersion

	dataAO1.Library = m.Library

	dataAO1.PipelineStatus = m.PipelineStatus

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this library Api version
func (m *LibraryAPIVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibrary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LibraryAPIVersion) validateAPIVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.APIVersion) { // not required
		return nil
	}

	if m.APIVersion != nil {
		if err := m.APIVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiVersion")
			}
			return err
		}
	}

	return nil
}

func (m *LibraryAPIVersion) validateLibrary(formats strfmt.Registry) error {

	if swag.IsZero(m.Library) { // not required
		return nil
	}

	if m.Library != nil {
		if err := m.Library.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("library")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LibraryAPIVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LibraryAPIVersion) UnmarshalBinary(b []byte) error {
	var res LibraryAPIVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
