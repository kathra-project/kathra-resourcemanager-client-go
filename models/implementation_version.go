// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ImplementationVersion implementation version
// swagger:model ImplementationVersion
type ImplementationVersion struct {
	Resource

	// api version
	APIVersion *APIVersion `json:"apiVersion,omitempty"`

	// implementation
	Implementation *Implementation `json:"implementation,omitempty"`

	// source repo
	SourceRepo *SourceRepository `json:"sourceRepo,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ImplementationVersion) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// AO1
	var dataAO1 struct {
		APIVersion *APIVersion `json:"apiVersion,omitempty"`

		Implementation *Implementation `json:"implementation,omitempty"`

		SourceRepo *SourceRepository `json:"sourceRepo,omitempty"`

		Version string `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.APIVersion = dataAO1.APIVersion

	m.Implementation = dataAO1.Implementation

	m.SourceRepo = dataAO1.SourceRepo

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ImplementationVersion) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		APIVersion *APIVersion `json:"apiVersion,omitempty"`

		Implementation *Implementation `json:"implementation,omitempty"`

		SourceRepo *SourceRepository `json:"sourceRepo,omitempty"`

		Version string `json:"version,omitempty"`
	}

	dataAO1.APIVersion = m.APIVersion

	dataAO1.Implementation = m.Implementation

	dataAO1.SourceRepo = m.SourceRepo

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this implementation version
func (m *ImplementationVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImplementation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImplementationVersion) validateAPIVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.APIVersion) { // not required
		return nil
	}

	if m.APIVersion != nil {
		if err := m.APIVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ImplementationVersion) validateImplementation(formats strfmt.Registry) error {

	if swag.IsZero(m.Implementation) { // not required
		return nil
	}

	if m.Implementation != nil {
		if err := m.Implementation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("implementation")
			}
			return err
		}
	}

	return nil
}

func (m *ImplementationVersion) validateSourceRepo(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceRepo) { // not required
		return nil
	}

	if m.SourceRepo != nil {
		if err := m.SourceRepo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceRepo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImplementationVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImplementationVersion) UnmarshalBinary(b []byte) error {
	var res ImplementationVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
