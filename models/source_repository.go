// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SourceRepository source repository
// swagger:model SourceRepository
type SourceRepository struct {
	Resource

	// branchs
	Branchs []string `json:"branchs"`

	// http Url
	HTTPURL string `json:"httpUrl,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// provider Id
	ProviderID string `json:"providerId,omitempty"`

	// ssh Url
	SSHURL string `json:"sshUrl,omitempty"`

	// web Url
	WebURL string `json:"webUrl,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SourceRepository) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// AO1
	var dataAO1 struct {
		Branchs []string `json:"branchs"`

		HTTPURL string `json:"httpUrl,omitempty"`

		Path string `json:"path,omitempty"`

		Provider string `json:"provider,omitempty"`

		ProviderID string `json:"providerId,omitempty"`

		SSHURL string `json:"sshUrl,omitempty"`

		WebURL string `json:"webUrl,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Branchs = dataAO1.Branchs

	m.HTTPURL = dataAO1.HTTPURL

	m.Path = dataAO1.Path

	m.Provider = dataAO1.Provider

	m.ProviderID = dataAO1.ProviderID

	m.SSHURL = dataAO1.SSHURL

	m.WebURL = dataAO1.WebURL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SourceRepository) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Branchs []string `json:"branchs"`

		HTTPURL string `json:"httpUrl,omitempty"`

		Path string `json:"path,omitempty"`

		Provider string `json:"provider,omitempty"`

		ProviderID string `json:"providerId,omitempty"`

		SSHURL string `json:"sshUrl,omitempty"`

		WebURL string `json:"webUrl,omitempty"`
	}

	dataAO1.Branchs = m.Branchs

	dataAO1.HTTPURL = m.HTTPURL

	dataAO1.Path = m.Path

	dataAO1.Provider = m.Provider

	dataAO1.ProviderID = m.ProviderID

	dataAO1.SSHURL = m.SSHURL

	dataAO1.WebURL = m.WebURL

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this source repository
func (m *SourceRepository) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SourceRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceRepository) UnmarshalBinary(b []byte) error {
	var res SourceRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
