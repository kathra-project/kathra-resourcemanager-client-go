// Code generated by go-swagger; DO NOT EDIT.

package implementation_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new implementation versions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for implementation versions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddImplementationVersion adds a new implementationversion
*/
func (a *Client) AddImplementationVersion(params *AddImplementationVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AddImplementationVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddImplementationVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addImplementationVersion",
		Method:             "POST",
		PathPattern:        "/implementationversions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddImplementationVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddImplementationVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addImplementationVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteImplementationVersion deletes a registered implementationversion
*/
func (a *Client) DeleteImplementationVersion(params *DeleteImplementationVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteImplementationVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImplementationVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteImplementationVersion",
		Method:             "DELETE",
		PathPattern:        "/implementationversions/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteImplementationVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImplementationVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteImplementationVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImplementationVersion retrieves a specific implementationversion object
*/
func (a *Client) GetImplementationVersion(params *GetImplementationVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetImplementationVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImplementationVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImplementationVersion",
		Method:             "GET",
		PathPattern:        "/implementationversions/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImplementationVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImplementationVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImplementationVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImplementationVersions retrieves a list of accessible implementationversions for authenticated user
*/
func (a *Client) GetImplementationVersions(params *GetImplementationVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetImplementationVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImplementationVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImplementationVersions",
		Method:             "GET",
		PathPattern:        "/implementationversions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImplementationVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImplementationVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImplementationVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateImplementationVersion fullies update a registered implementationversion
*/
func (a *Client) UpdateImplementationVersion(params *UpdateImplementationVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateImplementationVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImplementationVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateImplementationVersion",
		Method:             "PUT",
		PathPattern:        "/implementationversions/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateImplementationVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImplementationVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateImplementationVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateImplementationVersionAttributes partiallies update a registered implementationversion
*/
func (a *Client) UpdateImplementationVersionAttributes(params *UpdateImplementationVersionAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateImplementationVersionAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImplementationVersionAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateImplementationVersionAttributes",
		Method:             "PATCH",
		PathPattern:        "/implementationversions/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateImplementationVersionAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImplementationVersionAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateImplementationVersionAttributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
