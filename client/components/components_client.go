// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new components API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for components API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddComponent adds a new component
*/
func (a *Client) AddComponent(params *AddComponentParams, authInfo runtime.ClientAuthInfoWriter) (*AddComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addComponent",
		Method:             "POST",
		PathPattern:        "/components",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addComponent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComponent deletes a registered component
*/
func (a *Client) DeleteComponent(params *DeleteComponentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteComponent",
		Method:             "DELETE",
		PathPattern:        "/components/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteComponent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComponent retrieves a specific component object
*/
func (a *Client) GetComponent(params *GetComponentParams, authInfo runtime.ClientAuthInfoWriter) (*GetComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComponent",
		Method:             "GET",
		PathPattern:        "/components/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getComponent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComponents retrieves a list of accessible components for authenticated user
*/
func (a *Client) GetComponents(params *GetComponentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComponents",
		Method:             "GET",
		PathPattern:        "/components",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImplementationsComponent retrieves a list of accessible implementations for specific component and authenticated user
*/
func (a *Client) GetImplementationsComponent(params *GetImplementationsComponentParams, authInfo runtime.ClientAuthInfoWriter) (*GetImplementationsComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImplementationsComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImplementationsComponent",
		Method:             "GET",
		PathPattern:        "/components/{resourceId}/implementations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImplementationsComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImplementationsComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImplementationsComponent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComponent fullies update a registered component
*/
func (a *Client) UpdateComponent(params *UpdateComponentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateComponent",
		Method:             "PUT",
		PathPattern:        "/components/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComponent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComponentAttributes partiallies update a registered component
*/
func (a *Client) UpdateComponentAttributes(params *UpdateComponentAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateComponentAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComponentAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateComponentAttributes",
		Method:             "PATCH",
		PathPattern:        "/components/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateComponentAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComponentAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComponentAttributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
