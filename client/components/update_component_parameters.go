// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kathra-project/kathra-resourcemanager-client-go/models"
)

// NewUpdateComponentParams creates a new UpdateComponentParams object
// with the default values initialized.
func NewUpdateComponentParams() *UpdateComponentParams {
	var ()
	return &UpdateComponentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateComponentParamsWithTimeout creates a new UpdateComponentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateComponentParamsWithTimeout(timeout time.Duration) *UpdateComponentParams {
	var ()
	return &UpdateComponentParams{

		timeout: timeout,
	}
}

// NewUpdateComponentParamsWithContext creates a new UpdateComponentParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateComponentParamsWithContext(ctx context.Context) *UpdateComponentParams {
	var ()
	return &UpdateComponentParams{

		Context: ctx,
	}
}

// NewUpdateComponentParamsWithHTTPClient creates a new UpdateComponentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateComponentParamsWithHTTPClient(client *http.Client) *UpdateComponentParams {
	var ()
	return &UpdateComponentParams{
		HTTPClient: client,
	}
}

/*UpdateComponentParams contains all the parameters to send to the API endpoint
for the update component operation typically these are written to a http.Request
*/
type UpdateComponentParams struct {

	/*Component
	  Component object to be updated

	*/
	Component models.Component
	/*ResourceID
	  resource's id

	*/
	ResourceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update component params
func (o *UpdateComponentParams) WithTimeout(timeout time.Duration) *UpdateComponentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update component params
func (o *UpdateComponentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update component params
func (o *UpdateComponentParams) WithContext(ctx context.Context) *UpdateComponentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update component params
func (o *UpdateComponentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update component params
func (o *UpdateComponentParams) WithHTTPClient(client *http.Client) *UpdateComponentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update component params
func (o *UpdateComponentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComponent adds the component to the update component params
func (o *UpdateComponentParams) WithComponent(component models.Component) *UpdateComponentParams {
	o.SetComponent(component)
	return o
}

// SetComponent adds the component to the update component params
func (o *UpdateComponentParams) SetComponent(component models.Component) {
	o.Component = component
}

// WithResourceID adds the resourceID to the update component params
func (o *UpdateComponentParams) WithResourceID(resourceID string) *UpdateComponentParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the update component params
func (o *UpdateComponentParams) SetResourceID(resourceID string) {
	o.ResourceID = resourceID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateComponentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Component != nil {
		if err := r.SetBodyParam(o.Component); err != nil {
			return err
		}
	}

	// path param resourceId
	if err := r.SetPathParam("resourceId", o.ResourceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
