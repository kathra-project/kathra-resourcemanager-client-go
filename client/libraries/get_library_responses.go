// Code generated by go-swagger; DO NOT EDIT.

package libraries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kathra-project/kathra-resourcemanager-client-go/models"
)

// GetLibraryReader is a Reader for the GetLibrary structure.
type GetLibraryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLibraryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLibraryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLibraryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLibraryOK creates a GetLibraryOK with default headers values
func NewGetLibraryOK() *GetLibraryOK {
	return &GetLibraryOK{}
}

/*GetLibraryOK handles this case with default header values.

Returns the object
*/
type GetLibraryOK struct {
	Payload *models.Library
}

func (o *GetLibraryOK) Error() string {
	return fmt.Sprintf("[GET /libraries/{resourceId}][%d] getLibraryOK  %+v", 200, o.Payload)
}

func (o *GetLibraryOK) GetPayload() *models.Library {
	return o.Payload
}

func (o *GetLibraryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Library)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLibraryUnauthorized creates a GetLibraryUnauthorized with default headers values
func NewGetLibraryUnauthorized() *GetLibraryUnauthorized {
	return &GetLibraryUnauthorized{}
}

/*GetLibraryUnauthorized handles this case with default header values.

Unauthorized
*/
type GetLibraryUnauthorized struct {
}

func (o *GetLibraryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /libraries/{resourceId}][%d] getLibraryUnauthorized ", 401)
}

func (o *GetLibraryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
