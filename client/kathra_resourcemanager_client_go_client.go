// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/kathra-project/kathra-resourcemanager-client-go/client/api_versions"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/assignations"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/binary_repositories"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/catalog_entries"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/catalog_entry_packages"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/components"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/groups"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/implementation_versions"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/implementations"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/key_pairs"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/libraries"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/library_api_versions"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/pipelines"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/source_repositories"
	"github.com/kathra-project/kathra-resourcemanager-client-go/client/users"
)

// Default kathra resourcemanager client go HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new kathra resourcemanager client go HTTP client.
func NewHTTPClient(formats strfmt.Registry) *KathraResourcemanagerClientGo {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new kathra resourcemanager client go HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *KathraResourcemanagerClientGo {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new kathra resourcemanager client go client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *KathraResourcemanagerClientGo {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(KathraResourcemanagerClientGo)
	cli.Transport = transport

	cli.APIVersions = api_versions.New(transport, formats)

	cli.Assignations = assignations.New(transport, formats)

	cli.BinaryRepositories = binary_repositories.New(transport, formats)

	cli.CatalogEntries = catalog_entries.New(transport, formats)

	cli.CatalogEntryPackages = catalog_entry_packages.New(transport, formats)

	cli.Components = components.New(transport, formats)

	cli.Groups = groups.New(transport, formats)

	cli.ImplementationVersions = implementation_versions.New(transport, formats)

	cli.Implementations = implementations.New(transport, formats)

	cli.KeyPairs = key_pairs.New(transport, formats)

	cli.Libraries = libraries.New(transport, formats)

	cli.LibraryAPIVersions = library_api_versions.New(transport, formats)

	cli.Pipelines = pipelines.New(transport, formats)

	cli.SourceRepositories = source_repositories.New(transport, formats)

	cli.Users = users.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// KathraResourcemanagerClientGo is a client for kathra resourcemanager client go
type KathraResourcemanagerClientGo struct {
	APIVersions *api_versions.Client

	Assignations *assignations.Client

	BinaryRepositories *binary_repositories.Client

	CatalogEntries *catalog_entries.Client

	CatalogEntryPackages *catalog_entry_packages.Client

	Components *components.Client

	Groups *groups.Client

	ImplementationVersions *implementation_versions.Client

	Implementations *implementations.Client

	KeyPairs *key_pairs.Client

	Libraries *libraries.Client

	LibraryAPIVersions *library_api_versions.Client

	Pipelines *pipelines.Client

	SourceRepositories *source_repositories.Client

	Users *users.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *KathraResourcemanagerClientGo) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.APIVersions.SetTransport(transport)

	c.Assignations.SetTransport(transport)

	c.BinaryRepositories.SetTransport(transport)

	c.CatalogEntries.SetTransport(transport)

	c.CatalogEntryPackages.SetTransport(transport)

	c.Components.SetTransport(transport)

	c.Groups.SetTransport(transport)

	c.ImplementationVersions.SetTransport(transport)

	c.Implementations.SetTransport(transport)

	c.KeyPairs.SetTransport(transport)

	c.Libraries.SetTransport(transport)

	c.LibraryAPIVersions.SetTransport(transport)

	c.Pipelines.SetTransport(transport)

	c.SourceRepositories.SetTransport(transport)

	c.Users.SetTransport(transport)

}
