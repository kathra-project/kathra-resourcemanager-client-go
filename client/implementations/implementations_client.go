// Code generated by go-swagger; DO NOT EDIT.

package implementations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new implementations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for implementations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddImplementation adds a new implementation
*/
func (a *Client) AddImplementation(params *AddImplementationParams, authInfo runtime.ClientAuthInfoWriter) (*AddImplementationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddImplementationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addImplementation",
		Method:             "POST",
		PathPattern:        "/implementations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddImplementationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddImplementationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addImplementation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteImplementation deletes a registered implementation
*/
func (a *Client) DeleteImplementation(params *DeleteImplementationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteImplementationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImplementationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteImplementation",
		Method:             "DELETE",
		PathPattern:        "/implementations/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteImplementationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImplementationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteImplementation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImplementation retrieves a specific implementation object
*/
func (a *Client) GetImplementation(params *GetImplementationParams, authInfo runtime.ClientAuthInfoWriter) (*GetImplementationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImplementationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImplementation",
		Method:             "GET",
		PathPattern:        "/implementations/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImplementationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImplementationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImplementation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImplementations retrieves a list of accessible implementations for authenticated user
*/
func (a *Client) GetImplementations(params *GetImplementationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetImplementationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImplementationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImplementations",
		Method:             "GET",
		PathPattern:        "/implementations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImplementationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImplementationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImplementations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateImplementation fullies update a registered implementation
*/
func (a *Client) UpdateImplementation(params *UpdateImplementationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateImplementationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImplementationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateImplementation",
		Method:             "PUT",
		PathPattern:        "/implementations/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateImplementationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImplementationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateImplementation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateImplementationAttributes partiallies update a registered implementation
*/
func (a *Client) UpdateImplementationAttributes(params *UpdateImplementationAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateImplementationAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImplementationAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateImplementationAttributes",
		Method:             "PATCH",
		PathPattern:        "/implementations/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateImplementationAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImplementationAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateImplementationAttributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
