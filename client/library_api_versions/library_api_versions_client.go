// Code generated by go-swagger; DO NOT EDIT.

package library_api_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new library api versions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for library api versions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddLibraryAPIVersion adds a new libraryapiversion
*/
func (a *Client) AddLibraryAPIVersion(params *AddLibraryAPIVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AddLibraryAPIVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLibraryAPIVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addLibraryApiVersion",
		Method:             "POST",
		PathPattern:        "/libraryapiversions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddLibraryAPIVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddLibraryAPIVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addLibraryApiVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLibraryAPIVersion deletes a registered libraryapiversion
*/
func (a *Client) DeleteLibraryAPIVersion(params *DeleteLibraryAPIVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLibraryAPIVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLibraryAPIVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLibraryApiVersion",
		Method:             "DELETE",
		PathPattern:        "/libraryapiversions/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLibraryAPIVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLibraryAPIVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLibraryApiVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLibraryAPIVersion retrieves a specific libraryapiversion object
*/
func (a *Client) GetLibraryAPIVersion(params *GetLibraryAPIVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetLibraryAPIVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLibraryAPIVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLibraryApiVersion",
		Method:             "GET",
		PathPattern:        "/libraryapiversions/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLibraryAPIVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLibraryAPIVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLibraryApiVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLibraryAPIVersions retrieves a list of accessible libraryapiversions for authenticated user
*/
func (a *Client) GetLibraryAPIVersions(params *GetLibraryAPIVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLibraryAPIVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLibraryAPIVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLibraryApiVersions",
		Method:             "GET",
		PathPattern:        "/libraryapiversions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLibraryAPIVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLibraryAPIVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLibraryApiVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLibraryAPIVersion fullies update a registered libraryapiversion
*/
func (a *Client) UpdateLibraryAPIVersion(params *UpdateLibraryAPIVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLibraryAPIVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLibraryAPIVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLibraryApiVersion",
		Method:             "PUT",
		PathPattern:        "/libraryapiversions/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLibraryAPIVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLibraryAPIVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLibraryApiVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLibraryAPIVersionAttributes partiallies update a registered libraryapiversion
*/
func (a *Client) UpdateLibraryAPIVersionAttributes(params *UpdateLibraryAPIVersionAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLibraryAPIVersionAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLibraryAPIVersionAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLibraryApiVersionAttributes",
		Method:             "PATCH",
		PathPattern:        "/libraryapiversions/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLibraryAPIVersionAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLibraryAPIVersionAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLibraryApiVersionAttributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
