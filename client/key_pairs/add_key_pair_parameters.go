// Code generated by go-swagger; DO NOT EDIT.

package key_pairs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	KeyPair "github.com/kathra-project/kathra-core-model-go/models"
)

// NewAddKeyPairParams creates a new AddKeyPairParams object
// with the default values initialized.
func NewAddKeyPairParams() *AddKeyPairParams {
	var ()
	return &AddKeyPairParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddKeyPairParamsWithTimeout creates a new AddKeyPairParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddKeyPairParamsWithTimeout(timeout time.Duration) *AddKeyPairParams {
	var ()
	return &AddKeyPairParams{

		timeout: timeout,
	}
}

// NewAddKeyPairParamsWithContext creates a new AddKeyPairParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddKeyPairParamsWithContext(ctx context.Context) *AddKeyPairParams {
	var ()
	return &AddKeyPairParams{

		Context: ctx,
	}
}

// NewAddKeyPairParamsWithHTTPClient creates a new AddKeyPairParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddKeyPairParamsWithHTTPClient(client *http.Client) *AddKeyPairParams {
	var ()
	return &AddKeyPairParams{
		HTTPClient: client,
	}
}

/*AddKeyPairParams contains all the parameters to send to the API endpoint
for the add key pair operation typically these are written to a http.Request
*/
type AddKeyPairParams struct {

	/*Keypair
	  KeyPair object to be created

	*/
	Keypair KeyPair.KeyPair

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add key pair params
func (o *AddKeyPairParams) WithTimeout(timeout time.Duration) *AddKeyPairParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add key pair params
func (o *AddKeyPairParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add key pair params
func (o *AddKeyPairParams) WithContext(ctx context.Context) *AddKeyPairParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add key pair params
func (o *AddKeyPairParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add key pair params
func (o *AddKeyPairParams) WithHTTPClient(client *http.Client) *AddKeyPairParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add key pair params
func (o *AddKeyPairParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeypair adds the keypair to the add key pair params
func (o *AddKeyPairParams) WithKeypair(keypair KeyPair.KeyPair) *AddKeyPairParams {
	o.SetKeypair(keypair)
	return o
}

// SetKeypair adds the keypair to the add key pair params
func (o *AddKeyPairParams) SetKeypair(keypair KeyPair.KeyPair) {
	o.Keypair = keypair
}

// WriteToRequest writes these params to a swagger request
func (o *AddKeyPairParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Keypair != nil {
		if err := r.SetBodyParam(o.Keypair); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
