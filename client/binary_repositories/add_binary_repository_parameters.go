// Code generated by go-swagger; DO NOT EDIT.

package binary_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kathra-project/kathra-resourcemanager-client-go/models"
)

// NewAddBinaryRepositoryParams creates a new AddBinaryRepositoryParams object
// with the default values initialized.
func NewAddBinaryRepositoryParams() *AddBinaryRepositoryParams {
	var ()
	return &AddBinaryRepositoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddBinaryRepositoryParamsWithTimeout creates a new AddBinaryRepositoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddBinaryRepositoryParamsWithTimeout(timeout time.Duration) *AddBinaryRepositoryParams {
	var ()
	return &AddBinaryRepositoryParams{

		timeout: timeout,
	}
}

// NewAddBinaryRepositoryParamsWithContext creates a new AddBinaryRepositoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddBinaryRepositoryParamsWithContext(ctx context.Context) *AddBinaryRepositoryParams {
	var ()
	return &AddBinaryRepositoryParams{

		Context: ctx,
	}
}

// NewAddBinaryRepositoryParamsWithHTTPClient creates a new AddBinaryRepositoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddBinaryRepositoryParamsWithHTTPClient(client *http.Client) *AddBinaryRepositoryParams {
	var ()
	return &AddBinaryRepositoryParams{
		HTTPClient: client,
	}
}

/*AddBinaryRepositoryParams contains all the parameters to send to the API endpoint
for the add binary repository operation typically these are written to a http.Request
*/
type AddBinaryRepositoryParams struct {

	/*Binaryrepository
	  BinaryRepository object to be created

	*/
	Binaryrepository *models.BinaryRepository

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add binary repository params
func (o *AddBinaryRepositoryParams) WithTimeout(timeout time.Duration) *AddBinaryRepositoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add binary repository params
func (o *AddBinaryRepositoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add binary repository params
func (o *AddBinaryRepositoryParams) WithContext(ctx context.Context) *AddBinaryRepositoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add binary repository params
func (o *AddBinaryRepositoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add binary repository params
func (o *AddBinaryRepositoryParams) WithHTTPClient(client *http.Client) *AddBinaryRepositoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add binary repository params
func (o *AddBinaryRepositoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBinaryrepository adds the binaryrepository to the add binary repository params
func (o *AddBinaryRepositoryParams) WithBinaryrepository(binaryrepository *models.BinaryRepository) *AddBinaryRepositoryParams {
	o.SetBinaryrepository(binaryrepository)
	return o
}

// SetBinaryrepository adds the binaryrepository to the add binary repository params
func (o *AddBinaryRepositoryParams) SetBinaryrepository(binaryrepository *models.BinaryRepository) {
	o.Binaryrepository = binaryrepository
}

// WriteToRequest writes these params to a swagger request
func (o *AddBinaryRepositoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Binaryrepository != nil {
		if err := r.SetBodyParam(o.Binaryrepository); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
