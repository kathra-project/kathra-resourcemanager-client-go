// Code generated by go-swagger; DO NOT EDIT.

package binary_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new binary repositories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for binary repositories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddBinaryRepository adds a new binaryrepository
*/
func (a *Client) AddBinaryRepository(params *AddBinaryRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*AddBinaryRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBinaryRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addBinaryRepository",
		Method:             "POST",
		PathPattern:        "/binaryrepositories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddBinaryRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBinaryRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBinaryRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBinaryRepository deletes a registered binaryrepository
*/
func (a *Client) DeleteBinaryRepository(params *DeleteBinaryRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBinaryRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBinaryRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBinaryRepository",
		Method:             "DELETE",
		PathPattern:        "/binaryrepositories/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBinaryRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBinaryRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBinaryRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBinaryRepositories retrieves a list of accessible binaryrepositories for authenticated user
*/
func (a *Client) GetBinaryRepositories(params *GetBinaryRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBinaryRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBinaryRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBinaryRepositories",
		Method:             "GET",
		PathPattern:        "/binaryrepositories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBinaryRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBinaryRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBinaryRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBinaryRepository retrieves a specific binaryrepository object
*/
func (a *Client) GetBinaryRepository(params *GetBinaryRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetBinaryRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBinaryRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBinaryRepository",
		Method:             "GET",
		PathPattern:        "/binaryrepositories/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBinaryRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBinaryRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBinaryRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBinaryRepository fullies update a registered binaryrepository
*/
func (a *Client) UpdateBinaryRepository(params *UpdateBinaryRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateBinaryRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBinaryRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateBinaryRepository",
		Method:             "PUT",
		PathPattern:        "/binaryrepositories/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBinaryRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBinaryRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBinaryRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBinaryRepositoryAttributes partiallies update a registered binaryrepository
*/
func (a *Client) UpdateBinaryRepositoryAttributes(params *UpdateBinaryRepositoryAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateBinaryRepositoryAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBinaryRepositoryAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateBinaryRepositoryAttributes",
		Method:             "PATCH",
		PathPattern:        "/binaryrepositories/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBinaryRepositoryAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBinaryRepositoryAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBinaryRepositoryAttributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
