// Code generated by go-swagger; DO NOT EDIT.

package source_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	SourceRepository "github.com/kathra-project/kathra-core-model-go/models"
)

// NewAddSourceRepositoryParams creates a new AddSourceRepositoryParams object
// with the default values initialized.
func NewAddSourceRepositoryParams() *AddSourceRepositoryParams {
	var ()
	return &AddSourceRepositoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddSourceRepositoryParamsWithTimeout creates a new AddSourceRepositoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddSourceRepositoryParamsWithTimeout(timeout time.Duration) *AddSourceRepositoryParams {
	var ()
	return &AddSourceRepositoryParams{

		timeout: timeout,
	}
}

// NewAddSourceRepositoryParamsWithContext creates a new AddSourceRepositoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddSourceRepositoryParamsWithContext(ctx context.Context) *AddSourceRepositoryParams {
	var ()
	return &AddSourceRepositoryParams{

		Context: ctx,
	}
}

// NewAddSourceRepositoryParamsWithHTTPClient creates a new AddSourceRepositoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddSourceRepositoryParamsWithHTTPClient(client *http.Client) *AddSourceRepositoryParams {
	var ()
	return &AddSourceRepositoryParams{
		HTTPClient: client,
	}
}

/*AddSourceRepositoryParams contains all the parameters to send to the API endpoint
for the add source repository operation typically these are written to a http.Request
*/
type AddSourceRepositoryParams struct {

	/*Sourcerepository
	  SourceRepository object to be created

	*/
	Sourcerepository SourceRepository.SourceRepository

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add source repository params
func (o *AddSourceRepositoryParams) WithTimeout(timeout time.Duration) *AddSourceRepositoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add source repository params
func (o *AddSourceRepositoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add source repository params
func (o *AddSourceRepositoryParams) WithContext(ctx context.Context) *AddSourceRepositoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add source repository params
func (o *AddSourceRepositoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add source repository params
func (o *AddSourceRepositoryParams) WithHTTPClient(client *http.Client) *AddSourceRepositoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add source repository params
func (o *AddSourceRepositoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSourcerepository adds the sourcerepository to the add source repository params
func (o *AddSourceRepositoryParams) WithSourcerepository(sourcerepository SourceRepository.SourceRepository) *AddSourceRepositoryParams {
	o.SetSourcerepository(sourcerepository)
	return o
}

// SetSourcerepository adds the sourcerepository to the add source repository params
func (o *AddSourceRepositoryParams) SetSourcerepository(sourcerepository SourceRepository.SourceRepository) {
	o.Sourcerepository = sourcerepository
}

// WriteToRequest writes these params to a swagger request
func (o *AddSourceRepositoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Sourcerepository != nil {
		if err := r.SetBodyParam(o.Sourcerepository); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
