// Code generated by go-swagger; DO NOT EDIT.

package source_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new source repositories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for source repositories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddSourceRepository adds a new sourcerepository
*/
func (a *Client) AddSourceRepository(params *AddSourceRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*AddSourceRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSourceRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSourceRepository",
		Method:             "POST",
		PathPattern:        "/sourcerepositories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSourceRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSourceRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSourceRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSourceRepository deletes a registered sourcerepository
*/
func (a *Client) DeleteSourceRepository(params *DeleteSourceRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSourceRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSourceRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSourceRepository",
		Method:             "DELETE",
		PathPattern:        "/sourcerepositories/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSourceRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSourceRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSourceRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSourceRepositories retrieves a list of accessible sourcerepositories for authenticated user
*/
func (a *Client) GetSourceRepositories(params *GetSourceRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSourceRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSourceRepositories",
		Method:             "GET",
		PathPattern:        "/sourcerepositories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSourceRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSourceRepository retrieves a specific sourcerepository object
*/
func (a *Client) GetSourceRepository(params *GetSourceRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetSourceRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSourceRepository",
		Method:             "GET",
		PathPattern:        "/sourcerepositories/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSourceRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSourceRepository fullies update a registered sourcerepository
*/
func (a *Client) UpdateSourceRepository(params *UpdateSourceRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSourceRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSourceRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSourceRepository",
		Method:             "PUT",
		PathPattern:        "/sourcerepositories/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSourceRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSourceRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSourceRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSourceRepositoryAttributes partiallies update a registered sourcerepository
*/
func (a *Client) UpdateSourceRepositoryAttributes(params *UpdateSourceRepositoryAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSourceRepositoryAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSourceRepositoryAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSourceRepositoryAttributes",
		Method:             "PATCH",
		PathPattern:        "/sourcerepositories/{resourceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSourceRepositoryAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSourceRepositoryAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSourceRepositoryAttributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
